apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: "org.jetbrains.kotlin.plugin.serialization"

android {
    compileSdkVersion 35
    namespace "com.sudoplatform.emailexample"
    defaultConfig {
        applicationId 'com.sudoplatform.emailexample'
        minSdkVersion 26
        targetSdkVersion 35
        versionCode 1
        versionName "17.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
        create("minifiedDebug") {
            initWith(getByName("debug"))
            minifyEnabled true
            versionNameSuffix = " MINIFIED DEBUG"
            matchingFallbacks.add("debug")
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro", "proguard-test-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
        pickFirst("META-INF/kotlinx-coroutines-core.kotlin_module")
        pickFirst("META-INF/LICENSE.md")
        pickFirst("META-INF/NOTICE.md")
    }
    buildFeatures {
        viewBinding true
    }
}


dependencies {
    // Core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

    implementation 'com.sudoplatform:sudouser:21.0.0'
    implementation 'com.sudoplatform:sudoprofiles:17.0.0'
    implementation 'com.sudoplatform:sudoentitlements:13.0.0'
    implementation 'com.sudoplatform:sudonotification:5.0.1'
    implementation 'com.sudoplatform:sudoemail:20.1.0'

    implementation platform('com.google.firebase:firebase-bom:34.2.0')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-messaging-ktx:24.1.2'

    def coroutine_version = '1.10.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")

    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'

    def fragment_version = "1.8.9"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation 'com.google.code.gson:gson:2.13.2'

    implementation 'com.sun.mail:jakarta.mail:2.0.2'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'

    def androidxTest = '1.7.0'
    def espresso = "3.6.1"
    androidTestImplementation "androidx.test:core:$androidxTest"
    androidTestImplementation "androidx.test:core-ktx:$androidxTest"
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.3.0'
    androidTestImplementation "androidx.test:runner:$androidxTest"
    androidTestImplementation "androidx.test:rules:$androidxTest"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espresso") {
        exclude(group : "org.hamcrest") // exclude incompatible hamcrest that espresso doesn't use
    }
    androidTestImplementation "com.jakewharton.timber:timber:5.0.1"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.3.0"
}

// Kotlin Lint
apply plugin: 'org.jmailen.kotlinter'

kotlinter {
    reporters = ['checkstyle', 'plain']
}

// Vulnerability scanning
if (project.file("${rootProject.projectDir}/util/vulnerability-scan.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/vulnerability-scan.gradle"
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-email-example-android"
    ext.sonarProjectName = "sudo-email-example-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}
